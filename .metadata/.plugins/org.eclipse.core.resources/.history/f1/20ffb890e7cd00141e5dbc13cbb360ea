package com.scxh.bluetooth;

import java.util.ArrayList;
import java.util.Set;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

import com.scxh.bluetooth.Bluetooth.ServerOrCilent;

public class DeviceActivity extends Activity implements OnItemClickListener,
		OnClickListener {
	private static final int sAddressLength = 17; //蓝牙地址长度
	private ListView mListView;
	private ArrayList<DeviceItem> mDeviceLists;
	private Button mSeachDeviceBtn, mStartServiceBtn;
	private DevicesListAdapter mDeviceListAdapter;
	private Context mContext;
	/* 取得默认的蓝牙适配器 */
	private BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.devices_layout);
		mContext = this;

		mDeviceLists = new ArrayList<DeviceItem>();
		mDeviceListAdapter = new DevicesListAdapter(this, mDeviceLists);

		mListView = (ListView) findViewById(R.id.list);
		mListView.setAdapter(mDeviceListAdapter);
		mListView.setFastScrollEnabled(true);
		mListView.setOnItemClickListener(this);

		mSeachDeviceBtn = (Button) findViewById(R.id.start_seach);
		mSeachDeviceBtn.setOnClickListener(this);

		mStartServiceBtn = (Button) findViewById(R.id.start_service);
		mStartServiceBtn.setOnClickListener(this);

		registerBluetoothBroadcast();

		addPairedDevicesToListView();
	}

	@Override
	protected void onStart() {
		super.onStart();
		// If BT is not on, request that it be enabled.
		if (!mBluetoothAdapter.isEnabled()) {
			Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
			startActivityForResult(enableIntent, 3);
		}
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		// Make sure we're not doing discovery anymore
		if (mBluetoothAdapter != null) {
			mBluetoothAdapter.cancelDiscovery();
		}
		// Unregister broadcast listeners
		this.unregisterReceiver(mReceiver);
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.start_seach:
			if (mBluetoothAdapter.isDiscovering()) {
				mBluetoothAdapter.cancelDiscovery();
				mSeachDeviceBtn.setText("重新搜索");
			} else {
				mDeviceLists.clear();
				mDeviceListAdapter.notifyDataSetChanged();

				addPairedDevicesToListView();
			
				mBluetoothAdapter.startDiscovery();//开始搜索 
				mSeachDeviceBtn.setText("停止搜索");
			}
			break;
		case R.id.start_service:
			Bluetooth.serviceOrCilent = ServerOrCilent.SERVICE;
			Bluetooth.mTabHost.setCurrentTab(1);
			break;
		}
	}

	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {
		// Cancel discovery because it's costly and we're about to connect
		DeviceItem item = (DeviceItem) parent.getAdapter().getItem(position);
		String info = item.message;
		String address = info.substring(info.length() - sAddressLength);//xpera\n13:11:34:55:34:22
		Bluetooth.BlueToothAddress = address;

		AlertDialog.Builder alertDialog = new AlertDialog.Builder(mContext);
		alertDialog.setTitle("连接");// 标题
		alertDialog.setMessage(item.message);
		alertDialog.setPositiveButton("连接",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						mBluetoothAdapter.cancelDiscovery();
						mSeachDeviceBtn.setText("重新搜索");

						Bluetooth.serviceOrCilent = ServerOrCilent.CILENT;
						Bluetooth.mTabHost.setCurrentTab(1);
					}
				});
		alertDialog.setNegativeButton("取消",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						Bluetooth.BlueToothAddress = null;
					}
				});
		alertDialog.show();
	}
	
	private void registerBluetoothBroadcast(){
		// Register for broadcasts when a device is discovered
		IntentFilter discoveryFilter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
		this.registerReceiver(mReceiver, discoveryFilter);

		// Register for broadcasts when discovery has finished
		IntentFilter foundFilter = new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
		this.registerReceiver(mReceiver, foundFilter);
	}
	
	/**
	 * 获取蓝牙匹配设备信息,显示到ListView.
	 */
	private void addPairedDevicesToListView() {
		// Get a set of currently paired devices
		Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();

		// If there are paired devices, add each one to the ArrayAdapter
		if (pairedDevices.size() > 0) {
			for (BluetoothDevice device : pairedDevices) {
				updateListView(device.getName() + "\n"+ device.getAddress(), true);
			}
		} else {
			updateListView("没有设备已经配对", true);
		}
	}
	
    private void updateListView(String deviceNameAndAddress,boolean type){
    	for(DeviceItem item : mDeviceLists){  //筛选重复设备
    		String deviceMsg = item.message;
    		if(deviceMsg.equals(deviceNameAndAddress)){
    			return;
    		}
    	}
    	
    	mDeviceLists.add(new DeviceItem(deviceNameAndAddress, type));
		mDeviceListAdapter.notifyDataSetChanged();
		mListView.setSelection(mDeviceLists.size() - 1);
    }
	// The BroadcastReceiver that listens for discovered devices and changes the title when discovery is finished
	private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();

			// When discovery finds a device
			if (BluetoothDevice.ACTION_FOUND.equals(action)) {
				// Get the BluetoothDevice object from the Intent
				BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				// If it's already paired, skip it, because it's been listed already
				if (device.getBondState() != BluetoothDevice.BOND_BONDED) {
					updateListView(device.getName() + "\n"+ device.getAddress(), false);
				}
				// When discovery is finished, change the Activity title
			} else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
				setProgressBarIndeterminateVisibility(false);
				if (mListView.getCount() == 0) {
					updateListView("没有发现蓝牙设备", false);
				}
				mSeachDeviceBtn.setText("重新搜索");
			}
		}
	};

	public class DevicesListAdapter extends BaseAdapter {
		private ArrayList<DeviceItem> list;
		private LayoutInflater mInflater;

		public DevicesListAdapter(Context context, ArrayList<DeviceItem> list2) {
			list = list2;
			mInflater = LayoutInflater.from(context);
		}

		public int getCount() {
			return list.size();
		}

		public Object getItem(int position) {
			return list.get(position);
		}

		public long getItemId(int position) {
			return position;
		}

		public int getItemViewType(int position) {
			return position;
		}

		@SuppressLint("InflateParams")
		public View getView(int position, View convertView, ViewGroup parent) {
			ViewHolder viewHolder = null;
			DeviceItem item = (DeviceItem) getItem(position);
			if (convertView == null) {
				viewHolder = new ViewHolder();
				convertView = mInflater
						.inflate(R.layout.chat_item_layout, null);
				View view = (View) convertView.findViewById(R.id.list_child);
				TextView msgTxt = (TextView) convertView
						.findViewById(R.id.chat_msg);
				viewHolder.child = view;
				viewHolder.msg = msgTxt;
				convertView.setTag(viewHolder);
			} else {
				viewHolder = (ViewHolder) convertView.getTag();
			}

			if (item.isSiri) {
				viewHolder.child.setBackgroundResource(R.drawable.msgbox_rec);
			} else {
				viewHolder.child.setBackgroundResource(R.drawable.msgbox_send);
			}
			viewHolder.msg.setText(item.message);

			return convertView;
		}

		class ViewHolder {
			protected View child;
			protected TextView msg;
		}
	}

	public class DeviceItem {
		String message;
		boolean isSiri;

		public DeviceItem(String msg, boolean siri) {
			message = msg;
			isSiri = siri;
		}
	}

}