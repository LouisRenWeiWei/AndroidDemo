package com.warmtel.bluetooth;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.UUID;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.warmtel.bluetooth.bean.BlueItem;
import com.warmtel.bluetooth.service.BlueClientHandlerService;
import com.warmtel.bluetooth.util.Constances;

@SuppressLint("NewApi")
public class ChatFragmentActivity extends Activity implements OnClickListener {
	public static final String UUIDS = "00001101-0000-1000-8000-00805F9B34FB";
	private static final String PROTOCOL_SCHEME_RFCOMM = "btspp";
	private ListView mListView;
	private Button mSendBtn;
	private Button mDisConnectBtn;
	private EditText mEditMsgEdit;
	private ArrayList<BlueItem> mChatLists;
	private ChatListAdapter mChatListAdapter;
	private String mBluetoothAddress;
	private int mServerOrClientType;
	private Context mContext;
	private BluetoothServerSocket mBlueServerSocket = null;
	private ServiceThread mStartServerThread = null;
	private ClientThread mClientConnectThread = null;
	private BluetoothSocket mBlueSocket = null;
	private BluetoothDevice mBlueDevice = null;
	private ReadThread mReadThread = null;
	private BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
	private Handler mMessageHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			if (msg.what == 1) {
				mChatLists.add(new BlueItem((String) msg.obj, true));
			} else {
				mChatLists.add(new BlueItem((String) msg.obj, false));
			}
			mChatListAdapter.notifyDataSetChanged();
			mListView.setSelection(mChatLists.size() - 1);
		}

	};

	public static void actionServerChatActivity(Context context) {
		Intent intent = new Intent(context, ChatActivity.class);
		intent.putExtra(Constances.SERVER_CLIENT_TYPE, Constances.SERVER_TYPE);
		intent.putExtra(Constances.BLUETOOTH_ADDRESS, "");
		context.startActivity(intent);
	}

	public static void actionClientChatActivity(Context context, String address) {
		Intent intent = new Intent(context, ChatActivity.class);
		intent.putExtra(Constances.SERVER_CLIENT_TYPE, Constances.CLIENT_TYPE);
		intent.putExtra(Constances.BLUETOOTH_ADDRESS, address);
		context.startActivity(intent);
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.chat_layout);
		mContext = this;

		mServerOrClientType = getIntent() != null ? getIntent().getIntExtra(
				Constances.SERVER_CLIENT_TYPE, -1) : -1;
		mBluetoothAddress = getIntent() != null ? getIntent().getStringExtra(
				Constances.BLUETOOTH_ADDRESS) : "";

		mChatLists = new ArrayList<BlueItem>();
		mChatListAdapter = new ChatListAdapter(this, mChatLists);

		mListView = (ListView) findViewById(R.id.list);
		mListView.setAdapter(mChatListAdapter);
		mListView.setFastScrollEnabled(true);

		mEditMsgEdit = (EditText) findViewById(R.id.send_message_edit);
		mEditMsgEdit.clearFocus();

		mSendBtn = (Button) findViewById(R.id.send_message_btn);
		mSendBtn.setOnClickListener(this);

		mDisConnectBtn = (Button) findViewById(R.id.btn_disconnect);
		mDisConnectBtn.setOnClickListener(this);

	}
	@Override
    public synchronized void onResume() {
        super.onResume();
        if(Constances.isOpen)
        {
        	Toast.makeText(mContext, "连接已经打开，可以通信。如果要再建立连接，请先断开！", Toast.LENGTH_SHORT).show();
        	return;
        }
    	if (mServerOrClientType == Constances.CLIENT_TYPE) 
        {
			String address = mBluetoothAddress;
			if(!address.equals("null"))
			{
				mClientConnectThread = new ClientThread();
				mClientConnectThread.start();
				Constances.isOpen = true;
			}
			else
			{
				Toast.makeText(mContext, "address is null !", Toast.LENGTH_SHORT).show();
			}
        }else {        	      	
        	mStartServerThread = new ServiceThread();
        	mStartServerThread.start();
        	Constances.isOpen = true;
        }
    }
	@Override
	protected void onDestroy() {
		super.onDestroy();
		if (mServerOrClientType == Constances.CLIENT_TYPE) {
			BlueClientHandlerService.actionBlueClientHandlerService(mContext, Constances.SHUP_CLIENT_TYPE);
		} else {
			BlueClientHandlerService.actionBlueClientHandlerService(mContext, Constances.SHUP_SERVER_TYPE);
		}
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.send_message_btn:
			onSendMessageClick();
			break;
		case R.id.btn_disconnect:
			onDisConnectionClick();
			break;
		}
	}

	private void onSendMessageClick() {
		String msgText = mEditMsgEdit.getText().toString();
		if (msgText.length() > 0) {
			sendMessage(msgText);
			mEditMsgEdit.setText("");
			mEditMsgEdit.clearFocus();

			InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
			imm.hideSoftInputFromWindow(mEditMsgEdit.getWindowToken(), 0);
		} else
			Toast.makeText(mContext,
					getString(R.string.chat_null_sendcontent_message),
					Toast.LENGTH_SHORT).show();
	}

	private void onDisConnectionClick() {
		if (mServerOrClientType == Constances.CLIENT_TYPE) {
			shutdownClientThread();
		} else {
			shutdownServerThread();
		}
		Toast.makeText(mContext,getString(R.string.chat_disconnection_message),Toast.LENGTH_SHORT).show();
	}

	public class ChatListAdapter extends BaseAdapter {
		private ArrayList<BlueItem> list;
		private LayoutInflater mInflater;

		public ChatListAdapter(Context context, ArrayList<BlueItem> l) {
			list = l;
			mInflater = LayoutInflater.from(context);
		}

		public int getCount() {
			return list.size();
		}

		public Object getItem(int position) {
			return list.get(position);
		}

		public long getItemId(int position) {
			return position;
		}

		public int getItemViewType(int position) {
			return position;
		}

		public View getView(int position, View convertView, ViewGroup parent) {
			ViewHolder viewHolder = null;
			BlueItem item = (BlueItem) getItem(position);
			if (convertView == null) {
				viewHolder = new ViewHolder();
				convertView = mInflater
						.inflate(R.layout.chat_item_layout, null);
				View view = (View) convertView.findViewById(R.id.list_child);
				TextView msgTxt = (TextView) convertView
						.findViewById(R.id.chat_msg);
				viewHolder.child = view;
				viewHolder.msg = msgTxt;
				convertView.setTag(viewHolder);
			} else {
				viewHolder = (ViewHolder) convertView.getTag();
			}

			if (item.isFrom) {
				viewHolder.child.setBackgroundResource(R.drawable.msgbox_rec);
			} else {
				viewHolder.child.setBackgroundResource(R.drawable.msgbox_send);
			}
			viewHolder.msg.setText(item.message);

			return convertView;
		}

		class ViewHolder {
			protected View child;
			protected TextView msg;
		}
	}
	
	private void setStateMsg(String obj, int what) {
		Message msg = Message.obtain();
		msg.obj = obj;
		msg.what = what;
		mMessageHandler.sendMessage(msg);
	}

	class ClientThread extends Thread {
		public void run() {
			mBlueDevice = mBluetoothAdapter.getRemoteDevice(mBluetoothAddress);
			try {
				// 创建一个Socket连接：只需要服务器在注册时的UUID号
				int sdk = Integer.parseInt(Build.VERSION.SDK);
				if (sdk >= 10) {
					mBlueSocket = mBlueDevice.createInsecureRfcommSocketToServiceRecord(UUID.fromString(UUIDS));
				} else {
					mBlueSocket = mBlueDevice.createRfcommSocketToServiceRecord(UUID.fromString(UUIDS));
				}

//				Method method;
//				try {
//					method = mBlueDevice.getClass().getMethod(
//							"createRfcommSocket", new Class[] { int.class });
//					mBlueSocket = (BluetoothSocket) method.invoke(mBlueDevice,
//							1);
//				} catch (Exception e) {
//					Log.e("TAG", e.toString());
//				}

				setStateMsg(String.format(getString(R.string.chat_connectioning_message,mBluetoothAddress)), 0);

				mBlueSocket.connect();

				setStateMsg(
						getString(R.string.chat_connectioned_sendok_message), 0);

				mReadThread = new ReadThread();
				mReadThread.start();

			} catch (IOException e) {
				e.printStackTrace();
				setStateMsg(getString(R.string.chat_connection_error_message),
						0);
			}
		}
	};

	class ServiceThread extends Thread {
		public void run() {

			try {
				/*
				 * 创建一个蓝牙服务器 参数分别：服务器名称、UUID
				 */
				mBlueServerSocket = mBluetoothAdapter
						.listenUsingRfcommWithServiceRecord(
								PROTOCOL_SCHEME_RFCOMM, UUID.fromString(UUIDS));

				setStateMsg(
						getString(R.string.chat_please_client_connectioning_message),
						0);
				/* 接受客户端的连接请求 */
				mBlueSocket = mBlueServerSocket.accept();

				setStateMsg(
						getString(R.string.chat_client_connection_success_message),
						0);

				mReadThread = new ReadThread();
				mReadThread.start();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	};

	// 接受数据
	class ReadThread extends Thread {
		public void run() {

			byte[] buffer = new byte[1024];
			int bytes;
			InputStream mmInStream = null;

			try {
				mmInStream = mBlueSocket.getInputStream();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			while (true) {
				try {
					// Read from the InputStream
					if ((bytes = mmInStream.read(buffer)) > 0) {
						byte[] buf_data = new byte[bytes];
						for (int i = 0; i < bytes; i++) {
							buf_data[i] = buffer[i];
						}
						String s = new String(buf_data);
						setStateMsg(s, 1);
					}
				} catch (IOException e) {
					try {
						mmInStream.close();
					} catch (IOException e1) {
						e1.printStackTrace();
					}
					break;
				}
			}
		}
	}
	

	public void sendMessage(String msg) {
		if (mBlueSocket == null) {
			Toast.makeText(mContext,
					getString(R.string.chat_no_connection_message),
					Toast.LENGTH_SHORT).show();
			return;
		}
		try {
			OutputStream os = mBlueSocket.getOutputStream();
			os.write(msg.getBytes());
		} catch (IOException e) {
			e.printStackTrace();
		}

		setStateMsg(msg, 0);
	}


	public void shutdownClientThread() {
		new Thread() {
			public void run() {
				if (mClientConnectThread != null) {
					mClientConnectThread.interrupt();
					mClientConnectThread = null;
				}
				if (mReadThread != null) {
					mReadThread.interrupt();
					mReadThread = null;
				}
				if (mBlueSocket != null) {
					try {
						mBlueSocket.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
					mBlueSocket = null;
				}
			};
		}.start();
	}


	public void shutdownServerThread() {
		new Thread() {
			public void run() {
				if (mStartServerThread != null) {
					mStartServerThread.interrupt();
					mStartServerThread = null;
				}
				if (mReadThread != null) {
					mReadThread.interrupt();
					mReadThread = null;
				}
				try {
					if (mBlueSocket != null) {
						mBlueSocket.close();
						mBlueSocket = null;
					}
					if (mBlueServerSocket != null) {
						mBlueServerSocket.close();
						mBlueServerSocket = null;
					}
				} catch (IOException e) {
					Log.e("server", "mserverSocket.close()", e);
				}
			};
		}.start();
	}

}